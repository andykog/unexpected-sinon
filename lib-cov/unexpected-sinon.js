/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['unexpected-sinon.js']) {
  _$jscoverage['unexpected-sinon.js'] = [];
  _$jscoverage['unexpected-sinon.js'][23] = 0;
  _$jscoverage['unexpected-sinon.js'][24] = 0;
  _$jscoverage['unexpected-sinon.js'][25] = 0;
  _$jscoverage['unexpected-sinon.js'][26] = 0;
  _$jscoverage['unexpected-sinon.js'][27] = 0;
  _$jscoverage['unexpected-sinon.js'][29] = 0;
  _$jscoverage['unexpected-sinon.js'][32] = 0;
  _$jscoverage['unexpected-sinon.js'][33] = 0;
  _$jscoverage['unexpected-sinon.js'][34] = 0;
  _$jscoverage['unexpected-sinon.js'][36] = 0;
  _$jscoverage['unexpected-sinon.js'][40] = 0;
  _$jscoverage['unexpected-sinon.js'][41] = 0;
  _$jscoverage['unexpected-sinon.js'][44] = 0;
  _$jscoverage['unexpected-sinon.js'][45] = 0;
  _$jscoverage['unexpected-sinon.js'][48] = 0;
  _$jscoverage['unexpected-sinon.js'][49] = 0;
  _$jscoverage['unexpected-sinon.js'][52] = 0;
  _$jscoverage['unexpected-sinon.js'][53] = 0;
  _$jscoverage['unexpected-sinon.js'][56] = 0;
  _$jscoverage['unexpected-sinon.js'][57] = 0;
  _$jscoverage['unexpected-sinon.js'][60] = 0;
  _$jscoverage['unexpected-sinon.js'][61] = 0;
  _$jscoverage['unexpected-sinon.js'][62] = 0;
  _$jscoverage['unexpected-sinon.js'][64] = 0;
  _$jscoverage['unexpected-sinon.js'][68] = 0;
  _$jscoverage['unexpected-sinon.js'][69] = 0;
  _$jscoverage['unexpected-sinon.js'][70] = 0;
  _$jscoverage['unexpected-sinon.js'][71] = 0;
  _$jscoverage['unexpected-sinon.js'][72] = 0;
  _$jscoverage['unexpected-sinon.js'][73] = 0;
  _$jscoverage['unexpected-sinon.js'][74] = 0;
  _$jscoverage['unexpected-sinon.js'][75] = 0;
  _$jscoverage['unexpected-sinon.js'][77] = 0;
  _$jscoverage['unexpected-sinon.js'][81] = 0;
  _$jscoverage['unexpected-sinon.js'][82] = 0;
  _$jscoverage['unexpected-sinon.js'][83] = 0;
  _$jscoverage['unexpected-sinon.js'][86] = 0;
  _$jscoverage['unexpected-sinon.js'][87] = 0;
  _$jscoverage['unexpected-sinon.js'][88] = 0;
  _$jscoverage['unexpected-sinon.js'][90] = 0;
  _$jscoverage['unexpected-sinon.js'][94] = 0;
}
_$jscoverage['unexpected-sinon.js'][23]++;
(function (root, factory) {
  _$jscoverage['unexpected-sinon.js'][24]++;
  if (typeof exports === "object") {
    _$jscoverage['unexpected-sinon.js'][25]++;
    module.exports = factory(require("unexpected"), require("sinon"));
  }
  else {
    _$jscoverage['unexpected-sinon.js'][26]++;
    if (typeof define === "function" && define.amd) {
      _$jscoverage['unexpected-sinon.js'][27]++;
      define(["unexpected", "sinon"], factory);
    }
    else {
      _$jscoverage['unexpected-sinon.js'][29]++;
      factory(root.weknowhow.expect, root.sinon);
    }
  }
})(this, (function (expect, sinon) {
  _$jscoverage['unexpected-sinon.js'][32]++;
  expect.addAssertion("was [not] called", (function () {
  _$jscoverage['unexpected-sinon.js'][33]++;
  if (this.flags.not) {
    _$jscoverage['unexpected-sinon.js'][34]++;
    sinon.assert.notCalled(this.obj);
  }
  else {
    _$jscoverage['unexpected-sinon.js'][36]++;
    sinon.assert.called(this.obj);
  }
}));
  _$jscoverage['unexpected-sinon.js'][40]++;
  expect.addAssertion("was called once", (function () {
  _$jscoverage['unexpected-sinon.js'][41]++;
  sinon.assert.calledOnce(this.obj);
}));
  _$jscoverage['unexpected-sinon.js'][44]++;
  expect.addAssertion("was called twice", (function () {
  _$jscoverage['unexpected-sinon.js'][45]++;
  sinon.assert.calledTwice(this.obj);
}));
  _$jscoverage['unexpected-sinon.js'][48]++;
  expect.addAssertion("was called thrice", (function () {
  _$jscoverage['unexpected-sinon.js'][49]++;
  sinon.assert.calledThrice(this.obj);
}));
  _$jscoverage['unexpected-sinon.js'][52]++;
  expect.addAssertion("was called times", (function (times) {
  _$jscoverage['unexpected-sinon.js'][53]++;
  sinon.assert.callCount(this.obj, times);
}));
  _$jscoverage['unexpected-sinon.js'][56]++;
  expect.addAssertion("given call order", (function () {
  _$jscoverage['unexpected-sinon.js'][57]++;
  sinon.assert.callOrder.apply(null, this.obj);
}));
  _$jscoverage['unexpected-sinon.js'][60]++;
  expect.addAssertion("was [always] called on", (function (target) {
  _$jscoverage['unexpected-sinon.js'][61]++;
  if (this.flags.always) {
    _$jscoverage['unexpected-sinon.js'][62]++;
    sinon.assert.alwaysCalledOn(this.obj, target);
  }
  else {
    _$jscoverage['unexpected-sinon.js'][64]++;
    sinon.assert.calledOn(this.obj, target);
  }
}));
  _$jscoverage['unexpected-sinon.js'][68]++;
  expect.addAssertion("was [always] called with [exactly]", (function () {
  _$jscoverage['unexpected-sinon.js'][69]++;
  var args = [this.obj].concat(Array.prototype.slice.call(arguments));
  _$jscoverage['unexpected-sinon.js'][70]++;
  if (this.flags.always && this.flags.exactly) {
    _$jscoverage['unexpected-sinon.js'][71]++;
    sinon.assert.alwaysCalledWithExactly.apply(null, args);
  }
  else {
    _$jscoverage['unexpected-sinon.js'][72]++;
    if (this.flags.always) {
      _$jscoverage['unexpected-sinon.js'][73]++;
      sinon.assert.alwaysCalledWith.apply(null, args);
    }
    else {
      _$jscoverage['unexpected-sinon.js'][74]++;
      if (this.flags.exactly) {
        _$jscoverage['unexpected-sinon.js'][75]++;
        sinon.assert.calledWithExactly.apply(null, args);
      }
      else {
        _$jscoverage['unexpected-sinon.js'][77]++;
        sinon.assert.calledWith.apply(null, args);
      }
    }
  }
}));
  _$jscoverage['unexpected-sinon.js'][81]++;
  expect.addAssertion("was never called with", (function () {
  _$jscoverage['unexpected-sinon.js'][82]++;
  var args = [this.obj].concat(Array.prototype.slice.call(arguments));
  _$jscoverage['unexpected-sinon.js'][83]++;
  sinon.assert.neverCalledWith.apply(null, args);
}));
  _$jscoverage['unexpected-sinon.js'][86]++;
  expect.addAssertion("[always] threw", (function (value) {
  _$jscoverage['unexpected-sinon.js'][87]++;
  if (this.flags.always) {
    _$jscoverage['unexpected-sinon.js'][88]++;
    sinon.assert.alwaysThrew(this.obj, value);
  }
  else {
    _$jscoverage['unexpected-sinon.js'][90]++;
    sinon.assert.threw(this.obj, value);
  }
}));
  _$jscoverage['unexpected-sinon.js'][94]++;
  return expect;
}));
_$jscoverage['unexpected-sinon.js'].source = ["// Copyright (c) 2013 Sune Simonsen &lt;sune@we-knowhow.dk&gt;","//","// Permission is hereby granted, free of charge, to any person","// obtaining a copy of this software and associated documentation","// files (the 'Software'), to deal in the Software without","// restriction, including without limitation the rights to use, copy,","// modify, merge, publish, distribute, sublicense, and/or sell copies","// of the Software, and to permit persons to whom the Software is","// furnished to do so, subject to the following conditions:","//","// The above copyright notice and this permission notice shall be","// included in all copies or substantial portions of the Software.","//","// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,","// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF","// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND","// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS","// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN","// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN","// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE","// SOFTWARE.","","(function (root, factory) {","  if (typeof exports === 'object') {","    module.exports = factory(require('unexpected'), require('sinon'));","  } else if (typeof define === 'function' &amp;&amp; define.amd) {","    define(['unexpected', 'sinon'], factory);","  } else {","    factory(root.weknowhow.expect, root.sinon);","  }","}(this, function (expect, sinon) {","    expect.addAssertion('was [not] called', function () {","        if (this.flags.not) {","            sinon.assert.notCalled(this.obj);","        } else {","            sinon.assert.called(this.obj);","        }","    });","","    expect.addAssertion('was called once', function () {","        sinon.assert.calledOnce(this.obj);","    });","","    expect.addAssertion('was called twice', function () {","        sinon.assert.calledTwice(this.obj);","    });","","    expect.addAssertion('was called thrice', function () {","        sinon.assert.calledThrice(this.obj);","    });","","    expect.addAssertion('was called times', function (times) {","        sinon.assert.callCount(this.obj, times);","    });","","    expect.addAssertion('given call order', function () {","        sinon.assert.callOrder.apply(null, this.obj);","    });","","    expect.addAssertion('was [always] called on', function (target) {","        if (this.flags.always) {","            sinon.assert.alwaysCalledOn(this.obj, target);","        } else {","            sinon.assert.calledOn(this.obj, target);","        }","    });","","    expect.addAssertion('was [always] called with [exactly]', function () {","        var args = [this.obj].concat(Array.prototype.slice.call(arguments));","        if (this.flags.always &amp;&amp; this.flags.exactly) {","            sinon.assert.alwaysCalledWithExactly.apply(null, args);","        } else if (this.flags.always) {","            sinon.assert.alwaysCalledWith.apply(null, args);","        } else if (this.flags.exactly) {","            sinon.assert.calledWithExactly.apply(null, args);","        } else {","            sinon.assert.calledWith.apply(null, args);","        }","    });","","    expect.addAssertion('was never called with', function () {","        var args = [this.obj].concat(Array.prototype.slice.call(arguments));","        sinon.assert.neverCalledWith.apply(null, args);","    });","","    expect.addAssertion('[always] threw', function (value) {","        if (this.flags.always) {","            sinon.assert.alwaysThrew(this.obj, value);","        } else {","            sinon.assert.threw(this.obj, value);","        }","    });","","    return expect;","}));"];
